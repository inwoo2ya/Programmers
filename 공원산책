def solution(park, routes):
    pos = [0,0]
    answer = []
    dirs = {'E':(0,1) , 'W': (0,-1),'N':(-1,0) , 'S':(1,0)}
    for i, row in enumerate(park):
        for j, each in enumerate(row):
            if each == 'S':
                pos = [i,j]
    for op,n in map (lambda x: x.split() , routes):
        prev_pos = pos.copy()
        for _ in range(int(n)):
            pos[0] += dirs[op][0]
            pos[1] += dirs[op][1]
            if not (0 <= pos[0] <len(park) and
                    0 <= pos[1]<len(park[0]) and
                    park[pos[0]][pos[1]] != 'X'):
                pos = prev_pos
                break
    
    return pos
